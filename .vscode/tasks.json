{
    "version": "2.0.0",
    "tasks": [
        {
            "type": "cppbuild",
            "label": "build",
            "command": "G:/software/MinGW/mingw64/bin/g++.exe",
            // "args": [
            //     "-fdiagnostics-color=always",
            //     "-g",
            //     "${file}",
            //     "-o",
            //     "${fileDirname}/${fileBasenameNoExtension}.exe"
            // ],
            "args": [
                "-fdiagnostics-color=always",
                "-g",
                "${file}",
                "-o",
                "G://Program//CPP//CPP_Learn//temp.exe"
            ],
            "options": {
                "cwd": "G:/software/MinGW/mingw64/bin"
            },
            "problemMatcher": [
                "$gcc"
            ],
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "detail": "调试器生成的任务。"
        },
        {
            "type": "process", // process是把预定义变量和转义解析后直接全部传给command；shell相当于先打开shell再输入命令，所以args还会经过shell再解析一遍
            "label": "OpenCV", // 任务名称，与launch.json的preLaunchTask相对应
            "command": "G:/software/MinGW/mingw64/bin/g++.exe",   // 要使用的编译器，C++用g++
            "args": [
                "${file}",//当前文件名
                "-o",    // 指定输出文件名，不加该参数则默认输出a.exe，Linux下默认a.out
                "${fileDirname}/${fileBasenameNoExtension}.exe",
                "-g",    // 生成和调试有关的信息
                "-m64", // 不知为何有时会生成16位应用而无法运行，加上此条可强制生成64位的
                "-Wall", // 开启额外警告
                "-static-libgcc",     // 静态链接libgcc，一般都会加上
                "-finput-charset=UTF-8",
                "-fexec-charset=GBK", // 生成的程序使用GBK编码，不加这条会导致Win下输出中文乱码；繁体系统改成BIG5
                "-std=c++17", // 要用的语言标准，根据自己的需要修改。c++可用c++14
                // 扩展参数
                // -I 头文件目录
                // -L 库文件目录
                // -l 库文件
                "-I", "G:/software/OpenCV/include",
                "-I", "G:/software/OpenCV/include/opencv2",
                "-L", "G:/software/OpenCV/x64/mingw/lib",
                "-l", "libopencv_calib3d454",
                "-l", "libopencv_core454",
                "-l", "libopencv_dnn454",
                "-l", "libopencv_features2d454",
                "-l", "libopencv_flann454",
                "-l", "libopencv_highgui454",
                "-l", "libopencv_imgcodecs454",
                "-l", "libopencv_imgproc454",
                "-l", "libopencv_ml454",
                "-l", "libopencv_objdetect454",
                "-l", "libopencv_photo454",
                "-l", "libopencv_stitching454",
                "-l", "libopencv_video454",
                "-l", "libopencv_videoio454",
                ], // 编译的命令，其实相当于VSC帮你在终端中输了这些东西
            "group": {
                "kind": "build",
                "isDefault": true // 不为true时ctrl shift B就要手动选择了
            },
            "presentation": {
                "echo": true,
                "reveal": "always", // 执行任务时是否跳转到终端面板，可以为always，silent，never。具体参见VSC的文档
                "focus": false,     // 设为true后可以使执行task时焦点聚集在终端，但对编译C/C++来说，设为true没有意义
                "panel": "shared"   // 不同的文件的编译信息共享一个终端面板
            },
            "problemMatcher":"$gcc" // 捕捉编译时终端里的报错信息到问题面板中，修改代码后需要重新编译才会再次触发
        }
    ]
}